services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    command:
    - "--log.level=INFO"
    - "--api.insecure=true"
    - "--providers.docker=true"
    - "--providers.docker.exposedbydefault=false"
    - "--entryPoints.web.address=:80"
    - "--entryPoints.websecure.address=:443"
    - "--entrypoints.websecure.http.tls=true"
    - "--metrics.prometheus=true"
    ports:
    - "80:80"
    - "443:443"
    - "8088:8080"
    restart: unless-stopped
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock:ro"
    - letsencrypt:/letsencrypt
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.traefik.entrypoints=websecure"
    - "traefik.http.routers.traefik.rule=Host(`traefik.home.m1xxos.me`)"
    - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:10.10.4
    container_name: jellyfin
    environment:
    - PUID=1000
    - PGID=1000
    - TZ=Europe/Moscow
    volumes:
    - jellyfin-config:/config
    - tvseries:/data/tvshows
    - movies:/data/movies
    ports:
    - 8096:8096
    - 8920:8920
    - 7359:7359/udp
    - 1900:1900/udp
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.jellyfin.entrypoints=websecure"
    - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.home.m1xxos.me`)"
    - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"


  jellyseerr:
    image: fallenbagel/jellyseerr:2.3.0
    container_name: jellyseerr
    environment:
    - LOG_LEVEL=debug
    - TZ=Europe/Moscow
    - PORT=5055 #optional
    dns:
    - 9.9.9.9
    ports:
    - 5055:5055
    volumes:
    - jellyseerr-config:/app/config
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.jellyseerr.entrypoints=websecure"
    - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.home.m1xxos.me`)"
    - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"

  radarr:
    image: lscr.io/linuxserver/radarr:5.17.2
    container_name: radarr
    environment:
    - PUID=1000
    - PGID=1000
    - TZ=Europe/Moscow
    expose:
    - 7878
    volumes:
    - radarr-config:/config
    - movies:/movies #optional
    - downloads:/downloads #optional
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.radarr.entrypoints=websecure"
    - "traefik.http.routers.radarr.rule=Host(`radarr.home.m1xxos.me`)"
    - "traefik.http.routers.radarr.service=radarr"
    - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  sonarr:
    image: lscr.io/linuxserver/sonarr:4.0.12
    container_name: sonarr
    environment:
    - PUID=1000
    - PGID=1000
    - TZ=Europe/Moscow
    expose:
    - 8989
    volumes:
    - sonarr-config:/config
    - tvseries:/tv #optional
    - downloads:/downloads #optional
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.sonarr.entrypoints=websecure"
    - "traefik.http.routers.sonarr.service=sonarr"
    - "traefik.http.routers.sonarr.rule=Host(`sonarr.home.m1xxos.me`)"
    - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:1.29.2
    container_name: prowlarr
    environment:
    - PUID=1000
    - PGID=1000
    - TZ=Europe/Moscow
    expose:
    - 9696
    volumes:
    - prowlarr-config:/config
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.prowlarr.entrypoints=websecure"
    - "traefik.http.routers.prowlarr.service=prowlarr"
    - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.home.m1xxos.me`)"
    - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:20.04.1
    container_name: qbittorrent
    environment:
    - PUID=1000
    - PGID=1000
    - TZ=Europe/Moscow
    - WEBUI_PORT=8080
    - TORRENTING_PORT=6881
    volumes:
    - qbittorrent-config:/config
    - downloads:/downloads #optional
    ports:
    - 8080:8080
    - 6881:6881
    - 6881:6881/udp
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.qbittorrent.entrypoints=websecure"
    - "traefik.http.routers.qbittorrent.rule=Host(`torrent.home.m1xxos.me`)"
    - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"

  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sonarr-exporter
    command: ["sonarr"]
    environment:
      PORT: 9707
      URL: "http://sonarr:8989"
      APIKEY: $SONARR_API
    ports:
    - "9707:9707"
    restart: unless-stopped

  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: radarr-exporter
    command: ["radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr:7878"
      APIKEY: $RADARR_API
    ports:
    - "9708:9708"
    restart: unless-stopped

  prowlarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: prowlarr-exporter
    command: ["prowlarr"]
    environment:
      PORT: 9709
      URL: "http://prowlarr:9696"
      APIKEY: $PROWLARR_API
    ports:
    - "9709:9709"
    restart: unless-stopped

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:0.15.10
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ~/homarr/configs:/app/data/configs
    - ~/homarr/icons:/app/public/icons
    - ~/homarr/data:/data
    ports:
    - '7575:7575'
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.homarr.entrypoints=websecure"
    - "traefik.http.routers.homarr.rule=Host(`home.m1xxos.me`)"
    - "traefik.http.services.homarr.loadbalancer.server.port=7575"

  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
    - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    restart: unless-stopped

  redis:
    container_name: redis
    image: docker.io/library/redis:7.4-alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
    - redis:/data
    restart: unless-stopped

  server:
    container_name: authentik-server
    image: ghcr.io/goauthentik/server:2024.12.2
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
    volumes:
    - /home/m1xxos/authetik/media:/media
    - /home/m1xxos/authetik/custom-templates:/templates
    depends_on:
    - postgresql
    - redis
    restart: unless-stopped
    ports:
    - 9000:9000
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.auth.entrypoints=websecure"
    - "traefik.http.routers.auth.rule=Host(`auth.home.m1xxos.me`)"
    - "traefik.http.services.auth.loadbalancer.server.port=9000"

  worker:
    container_name: authentik-worker
    image: ghcr.io/goauthentik/server:2024.12.2
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: $AUTHENTIK_SECRET_KEY
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /home/m1xxos/authetik/media:/media
    - /home/m1xxos/authetik/certs:/certs
    - /home/m1xxos/authetik/custom-templates:/templates
    depends_on:
    - postgresql
    - redis

volumes:
  jellyfin-config:
  jellyseerr-config:
  radarr-config:
  sonarr-config:
  prowlarr-config:
  qbittorrent-config:
  searcharr-logs:
  searcharr-data:
  tvseries:
  movies:
  downloads:
  letsencrypt:
  database:
    driver: local
  redis:
    driver: local

networks:
  proxynet-monitoring:
    name: monitoring_default
    external: true
